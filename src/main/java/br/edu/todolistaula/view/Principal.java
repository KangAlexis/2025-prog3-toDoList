/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.todolistaula.view;

import br.edu.todolistaula.dao.TarefaDAO;
import br.edu.todolistaula.model.Tarefa;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Principal extends javax.swing.JFrame {
    
    // Guarda o id do usuário logado (serve para filtrar apenas as tarefas dele)
    private int idUsuario;

    // Objeto do DAO que permite acessar as tarefas no banco de dados
    private TarefaDAO tarefaDAO = new TarefaDAO();
    
    private int linha = -1;          // guarda a linha selecionada na tabela (-1 = nenhuma selecionada)
    
    private boolean editar = false;  // indica se o clique na tabela entrou em modo edição
    
    // Construtor sem parâmetros
    public Principal() {
        initComponents();            // inicializa os componentes gráficos (gerado pelo NetBeans)
        setLocationRelativeTo(this); // centraliza a tela na tela do computador
        setResizable(false);         // impede que a janela seja redimensionada
    }
   // Construtor que recebe o id do usuário logado
    public Principal(int idUsuario) {
        initComponents();            // inicializa os componentes gráficos
        setLocationRelativeTo(this); // centraliza a tela
        setResizable(false);         // trava o redimensionamento
        this.idUsuario = idUsuario;  // guarda o id do usuário logado
        atualizaTabela();            // já atualiza a tabela com as tarefas dele
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup(); // agrupa os rádios (garante seleção mutuamente exclusiva)
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();      // campo para digitar o título da tarefa
        jScrollPane1 = new javax.swing.JScrollPane();
        txaDescricao = new javax.swing.JTextArea();    // área de texto para a descrição da tarefa
        rdbSim = new javax.swing.JRadioButton();       // opção "concluída = true"
        rdbNao = new javax.swing.JRadioButton();       // opção "concluída = false"
        btnSalvar = new javax.swing.JButton();         // botão para salvar/atualizar a tarefa
        btnLimpar = new javax.swing.JButton();         // botão para limpar os campos do formulário
        jLabel4 = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();   // campo para digitar o título a pesquisar
        btnBuscar = new javax.swing.JButton();         // botão que dispara a busca/filtragem
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTarefas = new javax.swing.JTable();         // tabela que lista as tarefas
        btnSair = new javax.swing.JButton();           // fecha a janela atual
        btnExcluir = new javax.swing.JButton();        // exclui a tarefa selecionada

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255)); // fundo branco do painel principal

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cadastrar uma nova tarefa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 24))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Título:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Descrição:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Concluída:");

        txaDescricao.setColumns(20);
        txaDescricao.setRows(5);
        jScrollPane1.setViewportView(txaDescricao);

        buttonGroup1.add(rdbSim);
        rdbSim.setText("Sim");

        buttonGroup1.add(rdbNao);
        rdbNao.setText("Não");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        // layout do painel do formulário (gerado)
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(rdbSim, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdbNao, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalvar)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(rdbSim)
                            .addComponent(rdbNao))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalvar)
                            .addComponent(btnLimpar))
                        .addContainerGap())))
        );

        jLabel4.setText("Título:"); // rótulo do campo de pesquisa

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyPressed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        // configuração do modelo da tabela (colunas, tipos e edição)
        tblTarefas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Descrição", "Concluída"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false // impede edição direta nas células
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTarefas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTarefasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblTarefas);

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        // layout do painel principal (gerado)
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSair)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSair)
                    .addComponent(btnExcluir))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        // layout do frame (gerado)
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Clique no botão Salvar: salva nova tarefa ou confirma edição (conforme flag 'editar')
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        Tarefa t = retornaObjeto(); // monta o objeto Tarefa a partir dos campos da tela
        
        if(editar){
            try {
                int id = (int) tblTarefas.getValueAt(linha, 0); // pega o id da tarefa selecionada
                tarefaDAO.editarTarefa(t, id);  // atualiza no banco
                atualizaTabela();               // recarrega a tabela
                limparCampos();                 // limpa o formulário
                editar = false;                 // volta para modo "inserção"
            } catch (SQLException e) {
                System.out.println("ERRO, ao editar "
                        + "tarefa (view) -> " + e);
            }    
        }else{
            try {
                tarefaDAO.addTarefa(retornaObjeto(), idUsuario); // insere nova tarefa para o usuário
                atualizaTabela();   // recarrega a tabela
                limparCampos();     // limpa o formulário
            } catch (SQLException e) {
                System.out.println("ERRO, ao salvar "
                    + "tarefa (view) -> " + e);
            } 
        }   
    }//GEN-LAST:event_btnSalvarActionPerformed

    // Clique no botão Limpar: limpa os campos e desmarca os rádios
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    // Clique no botão Sair: fecha apenas esta janela (dispose)
    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    // Clique na tabela: carrega dados da linha selecionada nos campos e entra em modo edição
    private void tblTarefasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTarefasMouseClicked
        linha = tblTarefas.getSelectedRow(); // obtém o índice da linha clicada
        
        if(linha != -1){
            // lê os valores das colunas da linha selecionada
            String titulo = (String) tblTarefas.getValueAt(linha, 1);
            String descricao = (String) tblTarefas.getValueAt(linha, 2);
            String concluida = (String) tblTarefas.getValueAt(linha, 3);
            
            // preenche os campos do formulário
            txtTitulo.setText(titulo);
            txaDescricao.setText(descricao);
            
            // marca o rádio conforme a coluna "Concluída" (texto "Sim"/"Não" mostrado na tabela)
            if(concluida.equals("Sim")){
                rdbSim.setSelected(true);
            }else{
                rdbNao.setSelected(true);
            }
        }
        editar = true; // sinaliza que, ao salvar, será uma edição e não uma inserção
    }//GEN-LAST:event_tblTarefasMouseClicked

    // Clique no botão Excluir: remove do banco a tarefa da linha selecionada
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int id = (int) tblTarefas.getValueAt(linha, 0); // pega o id da tarefa selecionada
        
        try {
            tarefaDAO.deletarTarefa(id); // exclui no banco
            atualizaTabela();            // atualiza a listagem
            editar = false;              // volta para modo "inserção"
        } catch (SQLException e) {
            System.out.println("ERRO, ao deletar "
                    + "tarefa (view) " + e);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    // Clique no botão Buscar: filtra a tabela pelo título digitado
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String titulo = txtPesquisar.getText();
        atualizaTabela(titulo); // recarrega a tabela aplicando o filtro por título
    }//GEN-LAST:event_btnBuscarActionPerformed

    // Digitou no campo de pesquisa: faz a busca "ao digitar" (atualização imediata)
    private void txtPesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyPressed
        String titulo = txtPesquisar.getText();
        atualizaTabela(titulo); // filtra conforme texto atual no campo
    }//GEN-LAST:event_txtPesquisarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName()); // aplica o tema Nimbus, se disponível
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true); // cria e exibe a janela
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdbNao;
    private javax.swing.JRadioButton rdbSim;
    private javax.swing.JTable tblTarefas;
    private javax.swing.JTextArea txaDescricao;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables

    // Método responsável por atualizar os dados da tabela de tarefas na tela
    private void atualizaTabela(){
        // Pega o modelo da tabela (tblTarefas) e zera as linhas atuais
        DefaultTableModel modelo = (DefaultTableModel) tblTarefas.getModel();
        modelo.setNumRows(0);
        
        // Cria uma lista de tarefas (inicialmente vazia)
        ArrayList<Tarefa> tarefas = new ArrayList<>();
        
        try {
            // Busca no banco todas as tarefas do usuário logado
            tarefas = tarefaDAO.retornaListadeTarefas(idUsuario);
            
            // Percorre cada tarefa da lista
            for(Tarefa t : tarefas){
                // Se concluída for true, mostra "Sim", senão mostra "Não"
                String concluida = (t.isConcluida() ? "Sim" : "Não");
                
                // Monta um vetor com os dados da tarefa (cada posição é uma coluna da tabela)
                Object [] linha = {
                    t.getId(),         // primeira coluna: ID
                    t.getTitulo(),     // segunda coluna: Título
                    t.getDescriao(),   // terceira coluna: Descrição
                    concluida          // quarta coluna: se está concluída
                };
                
                // Adiciona essa linha na tabela
                modelo.addRow(linha);
            }
        } catch (SQLException e) {
            // Caso dê algum erro de banco, mostra no console
            System.out.println("ERRO, ao carregar tabela na view -> " + e);
        }
    } 
    
    // Monta um objeto Tarefa a partir dos campos preenchidos no formulário
    private Tarefa retornaObjeto(){
        String titulo = txtTitulo.getText();         // lê o título digitado
        String descricao = txaDescricao.getText();   // lê a descrição digitada
        boolean concluida = rdbSim.isSelected();     // marca "true" se o rádio "Sim" estiver selecionado
        
        Tarefa t = new Tarefa();
        t.setTitulo(titulo);
        t.setDescriao(descricao);
        t.setConcluida(concluida);
        t.setUsuarioId(idUsuario); // relaciona a tarefa com o usuário logado
        
        return t;          
    }

    // Limpa os campos do formulário e desmarca as opções
    private void limparCampos(){
        txtTitulo.setText("");
        txaDescricao.setText("");
        buttonGroup1.clearSelection(); // desmarca os rádios "Sim"/"Não"
    }
    
    // Atualiza a tabela aplicando filtro por título (busca com LIKE no DAO)
    private void atualizaTabela(String titulo){
        // Pega o modelo da tabela (tblTarefas) e zera as linhas atuais
        DefaultTableModel modelo = (DefaultTableModel) tblTarefas.getModel();
        modelo.setNumRows(0);
        
        // Cria uma lista de tarefas (inicialmente vazia)
        ArrayList<Tarefa> tarefas = new ArrayList<>();
        
        try {
            // Busca no banco todas as tarefas do usuário logado
            tarefas = tarefaDAO.retornaListadeTarefas(idUsuario, titulo);
            
            // Percorre cada tarefa da lista
            for(Tarefa t : tarefas){
                // Se concluída for true, mostra "Sim", senão mostra "Não"
                String concluida = (t.isConcluida() ? "Sim" : "Não");
                
                // Monta um vetor com os dados da tarefa (cada posição é uma coluna da tabela)
                Object [] linha = {
                    t.getId(),         // primeira coluna: ID
                    t.getTitulo(),     // segunda coluna: Título
                    t.getDescriao(),   // terceira coluna: Descrição
                    concluida          // quarta coluna: se está concluída
                };
                
                // Adiciona essa linha na tabela
                modelo.addRow(linha);
            }
        } catch (SQLException e) {
            // Caso dê algum erro de banco, mostra no console
            System.out.println("ERRO, ao carregar tabela na view -> " + e);
        }
    } 
}
